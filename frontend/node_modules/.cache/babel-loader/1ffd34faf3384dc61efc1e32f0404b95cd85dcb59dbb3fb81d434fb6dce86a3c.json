{"ast":null,"code":"const BASE_URL = 'http://localhost:8080';\n\n// Get all tasks with optional search, pagination (page, limit)\nexport const GetAllTasks = async (search = '', page = 1, limit = 5) => {\n  const url = `${BASE_URL}/api/tasks?search=${search}&page=${page}&limit=${limit}`;\n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, options);\n    const {\n      data\n    } = await result.json();\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n\n// Get task details by task ID\n_c = GetAllTasks;\nexport const GetTaskDetailsById = async id => {\n  const url = `${BASE_URL}/api/tasks/${id}`;\n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, options);\n    const {\n      data\n    } = await result.json();\n    console.log(data);\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n\n// Delete task by task ID\n_c2 = GetTaskDetailsById;\nexport const DeleteTaskById = async id => {\n  const url = `${BASE_URL}/api/tasks/${id}`;\n  const options = {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const result = await fetch(url, options);\n    const data = await result.json();\n    console.log(data);\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n\n// Create a new task\n_c3 = DeleteTaskById;\nexport const CreateTask = async taskObj => {\n  const url = `${BASE_URL}/api/tasks`;\n  console.log('url ', url);\n  // Create a FormData object for task data\n  const formData = new FormData();\n\n  // Append all fields to the FormData object\n  for (const key in taskObj) {\n    formData.append(key, taskObj[key]);\n  }\n  // FormData handles the headers and content type\n  const options = {\n    method: 'POST',\n    body: formData\n  };\n  try {\n    const result = await fetch(url, options);\n    const data = await result.json();\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n\n// Update task by task ID\n_c4 = CreateTask;\nexport const UpdateTaskById = async (taskObj, id) => {\n  const url = `${BASE_URL}/api/tasks/${id}`;\n  console.log('url ', url);\n  // Create a FormData object for task data\n  const formData = new FormData();\n\n  // Append all fields to the FormData object\n  for (const key in taskObj) {\n    formData.append(key, taskObj[key]);\n  }\n  // FormData handles the headers and content type\n  const options = {\n    method: 'PUT',\n    body: formData\n  };\n  try {\n    const result = await fetch(url, options);\n    const data = await result.json();\n    console.log('<---update--> ', data);\n    return data;\n  } catch (err) {\n    return err;\n  }\n};\n_c5 = UpdateTaskById;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"GetAllTasks\");\n$RefreshReg$(_c2, \"GetTaskDetailsById\");\n$RefreshReg$(_c3, \"DeleteTaskById\");\n$RefreshReg$(_c4, \"CreateTask\");\n$RefreshReg$(_c5, \"UpdateTaskById\");","map":{"version":3,"names":["BASE_URL","GetAllTasks","search","page","limit","url","options","method","headers","result","fetch","data","json","err","_c","GetTaskDetailsById","id","console","log","_c2","DeleteTaskById","_c3","CreateTask","taskObj","formData","FormData","key","append","body","_c4","UpdateTaskById","_c5","$RefreshReg$"],"sources":["/home/krushik/projects/EmployeeManagementApp/frontend/src/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080';\n\n// Get all tasks with optional search, pagination (page, limit)\nexport const GetAllTasks = async (search = '', page = 1, limit = 5) => {\n    const url = `${BASE_URL}/api/tasks?search=${search}&page=${page}&limit=${limit}`;\n    const options = {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n    try {\n        const result = await fetch(url, options);\n        const { data } = await result.json();\n\n        return data;\n    } catch (err) {\n        return err;\n    }\n}\n\n// Get task details by task ID\nexport const GetTaskDetailsById = async (id) => {\n    const url = `${BASE_URL}/api/tasks/${id}`;\n    const options = {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n    try {\n        const result = await fetch(url, options);\n        const { data } = await result.json();\n        console.log(data);\n        return data;\n    } catch (err) {\n        return err;\n    }\n}\n\n// Delete task by task ID\nexport const DeleteTaskById = async (id) => {\n    const url = `${BASE_URL}/api/tasks/${id}`;\n    const options = {\n        method: 'DELETE',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n    try {\n        const result = await fetch(url, options);\n        const data = await result.json();\n        console.log(data);\n        return data;\n    } catch (err) {\n        return err;\n    }\n}\n\n// Create a new task\nexport const CreateTask = async (taskObj) => {\n    const url = `${BASE_URL}/api/tasks`;\n    console.log('url ', url);\n    // Create a FormData object for task data\n    const formData = new FormData();\n\n    // Append all fields to the FormData object\n    for (const key in taskObj) {\n        formData.append(key, taskObj[key]);\n    }\n    // FormData handles the headers and content type\n    const options = {\n        method: 'POST',\n        body: formData\n    };\n    try {\n        const result = await fetch(url, options);\n        const data = await result.json();\n        return data;\n    } catch (err) {\n        return err;\n    }\n};\n\n// Update task by task ID\nexport const UpdateTaskById = async (taskObj, id) => {\n    const url = `${BASE_URL}/api/tasks/${id}`;\n    console.log('url ', url);\n    // Create a FormData object for task data\n    const formData = new FormData();\n\n    // Append all fields to the FormData object\n    for (const key in taskObj) {\n        formData.append(key, taskObj[key]);\n    }\n    // FormData handles the headers and content type\n    const options = {\n        method: 'PUT',\n        body: formData\n    };\n    try {\n        const result = await fetch(url, options);\n        const data = await result.json();\n        console.log('<---update--> ', data);\n        return data;\n    } catch (err) {\n        return err;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}